{"version":3,"sources":["components/ImageList.js","containers/Images.js","containers/Image.js","components/App.js","serviceWorker.js","index.js"],"names":["ImageList","image_list","list","map","image","className","key","id","to","src","url","Images","state","image_detail","fetch","then","resp","json","data","setState","this","length","Component","Image","props","match","params","image_id","albumId","title","thumbnailUrl","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sSAmBeA,EAfC,SAAC,GAAU,IACpBC,EADmB,EAARC,KACKC,KAAI,SAACC,GAC1B,OACC,yBAAKC,UAAU,uBAAuBC,IAAKF,EAAMG,IAChD,kBAAC,IAAD,CAAMC,GAAI,WAAWJ,EAAMG,IAAI,yBAAKE,IAAKL,EAAMM,OADhD,SAKF,OACC,6BACET,EADF,MCiBaU,E,2MAzBXC,MAAM,CACJC,aAAa,I,mFAEG,IAAD,OACjBC,MAAM,+CACLC,MAAK,SAAAC,GAAI,OAAEA,EAAKC,UAChBF,MAAK,SAAAG,GACF,EAAKC,SAAS,CACZN,aAAaK,S,+BAMnB,OAAwC,IAAjCE,KAAKR,MAAMC,aAAaQ,OAE7B,wBAAIhB,UAAU,kBAAd,eAEI,yBAAKA,UAAU,MACb,kBAAC,EAAD,CAAWH,KAAMkB,KAAKR,MAAMC,eAD9B,Y,GAnBWS,aC6CNC,E,2MA9CdX,MAAM,CACLC,aAAa,I,mFAEM,IAAD,OAEZN,EAAGa,KAAKI,MAAMC,MAAMC,OAAOC,SAEjCb,MAAM,+CAA+CP,GACpDQ,MAAK,SAAAC,GAAI,OAAEA,EAAKC,UAChBF,MAAK,SAAAG,GACL,EAAKC,SAAS,CACbN,aAAaK,S,+BAIP,IAAD,EACmCE,KAAKR,MAAMC,aAA9Ce,EADA,EACAA,QAAQrB,EADR,EACQA,GAAGsB,EADX,EACWA,MAAMnB,EADjB,EACiBA,IAAIoB,EADrB,EACqBA,aAE5B,OAAwC,IAAjCV,KAAKR,MAAMC,aAAaQ,OAC5B,wBAAIhB,UAAU,kBAAd,gBAGD,6BAASA,UAAU,sEACjB,wBAAIA,UAAU,sBAAd,iBACA,yBAAKA,UAAU,6BAChB,uBAAGA,UAAU,4BAAb,aACcuB,GAEb,uBAAGvB,UAAU,4BAAb,QACOE,GAEP,uBAAGF,UAAU,4BAAb,WACUwB,GAEV,uBAAGxB,UAAU,4BAAb,SACQK,GAER,uBAAGL,UAAU,4BAAb,kBACiByB,S,GAvCHR,aCmBLS,EAbL,WACN,OACM,yBAAK1B,UAAU,MACb,wBAAIA,UAAU,cAAd,oBAEA,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,IAAIC,UAAWvB,IAHnC,MAIE,kBAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,UAAUC,UAAWvB,IACvC,kBAAC,IAAD,CAAOsB,KAAK,oBAAoBC,UAAWX,M,MCHnCY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASb,MACvB,2DCVNc,IAASC,OACR,kBAAC,IAAD,KACA,kBAAC,EAAD,OACWC,SAASC,eAAe,SDwH9B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.07c5a99a.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\n{/* It takes images data as props and map each image and showing images */}\r\nconst ImageList=({list})=>{\r\n\tconst image_list=list.map((image)=>{\r\n\t\treturn(\r\n\t\t\t<div className=\"tc w-20 grow dib ma2\" key={image.id} >\r\n\t\t\t\t<Link to={\"/images/\"+image.id}><img src={image.url}/></Link>  {/*It show image and its Link with its id */}\r\n\t\t\t</div>\r\n\t\t)\r\n\t})\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{image_list} {/* This list contains JSX of each image with links to go when it click */}\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default ImageList;","import React,{Component} from 'react'\r\nimport ImageList from '../components/ImageList'\r\n\r\n{/*Images is container component that fetch posts from API and pass it to ImageList container component */}\r\nclass Images extends Component{\r\n    state={\r\n      image_detail:[]\r\n    }\r\n  componentDidMount(){\r\n    fetch(\"https://jsonplaceholder.typicode.com/photos\")\r\n    .then(resp=>resp.json())\r\n    .then(data=>{\r\n        this.setState({\r\n          image_detail:data\r\n      })\r\n    })\r\n  }\r\n\r\n  render(){\r\n    return this.state.image_detail.length===0 \r\n    ?\r\n      <h2 className=\"f3 light-green\">Loading... </h2>\r\n    :\r\n          <div className=\"tc\">\r\n            <ImageList list={this.state.image_detail} />    {/* Pass the list of images to ImageList container component */}\r\n          </div>\r\n  }\r\n}\r\n\r\n\r\nexport default Images;","import React,{Component} from 'react'\r\n\r\nclass Image extends Component{\r\n\tstate={\r\n\t\timage_detail:[]\r\n\t}\r\n\tcomponentDidMount(){\r\n\t    {/* It gives the path id we click now we have imageid so we can grab image */}\r\n\t\tconst id=this.props.match.params.image_id \r\n\t\t {/* Grabbing images */}\r\n\t\tfetch(\"https://jsonplaceholder.typicode.com/photos/\"+id) \r\n\t\t.then(resp=>resp.json())  \r\n\t\t.then(data=>{\r\n\t\t\tthis.setState({\r\n\t\t\t\timage_detail:data\r\n\t\t\t\t})\r\n\t\t})\r\n\t}\r\n\trender(){\r\n\t\tconst {albumId,id,title,url,thumbnailUrl}=this.state.image_detail\r\n\t\t{/*here we returning that image we click */}\r\n\t\treturn this.state.image_detail.length===0\r\n\t\t\t? <h2 className='f3 light-green'> Loading... </h2>\r\n\t\t\t:\r\n\t\t\t(\r\n\t\t\t\t<article className=\"center mw5 mw6-ns br3 light-green hidden ba bw1 b--light-green mv4\">\r\n  \t\t\t\t<h2 className=\"f4 br3 mv0 pv2 ph3\">Image Details</h2>\r\n  \t\t\t\t<div className=\"tl pa3 bt b--light-green \">\r\n\t\t\t\t\t<p className=\"f6 f5-ns lh-copy measure\">\r\n\t \t\t\t\t \tAlbumId:  {albumId}\r\n\t \t\t\t\t</p>\r\n\t \t\t\t\t<p className=\"f6 f5-ns lh-copy measure\">\r\n\t \t\t\t\t\tId:  {id}\r\n\t \t\t\t\t</p>\r\n\t\t\t \t\t<p className=\"f6 f5-ns lh-copy measure\">\r\n\t \t\t\t\t\tTitle:  {title}\r\n\t \t\t\t\t</p>\r\n\t \t\t\t\t<p className=\"f6 f5-ns lh-copy measure\">\r\n\t \t\t\t\t\tUrl:  {url}\r\n\t \t\t\t\t</p>\r\n\t \t\t\t\t<p className=\"f6 f5-ns lh-copy measure\">\r\n\t \t\t\t\t\tThumbnailurl:  {thumbnailUrl}\r\n\t \t\t\t\t</p>\r\n  \t\t\t\t</div>\r\n\t\t\t\t</article>\r\n\t\t\t)\r\n\t\t}\r\n}\r\n\r\nexport default Image;","import React from 'react'\nimport './App.css'\nimport {Route} from 'react-router-dom';\nimport Images from '../containers/Images';\nimport Image from '../containers/Image';\n\n{/*App component which defines Routes and what component to load when we go to that path */}\n{/*className=\"bb bw1 pb3\" are used for styling using Tachyons*/}\nconst App=()=>{\n    return(\n          <div className=\"tc\">\n            <h1 className=\"bb bw1 pb3\">Fun With Images </h1>    \n             {/*Image component loads you the details of Image you click*/}\n            <Route exact path='/' component={Images}/>   {/*Images component loads you the list of Images for both paths*/}\n            <Route exact path='/images' component={Images}/>\n            <Route path=\"/images/:image_id\" component={Image}/>\n          </div>\n      )\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n\t<Router>\n\t<App />\n\t</Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}